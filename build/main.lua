-- Book created by Kwik for Adobe Photoshop  - Developed by Kwiksher -- Copyright (C) 2013 kwiksher.com. All Rights Reserved. -- Created using Kwik 3.1.6. -- uses DMC classes, by David McCuskey -- Exported on Sat May 03 2014 18:22:00 GMT-0500 local composer = require("composer") composer.Gesture = require("dmc_gesture") composer.MultiTouch = require("dmc_multiTouch") system.activate("multitouch") local json = require("json") -- check if current SDK version is the latest compatible with Kwik local function versionCheck(event) if "clicked" == event.action then if event.index == 2 then system.openURL( "https://developer.coronalabs.com/downloads/coronasdk" ) end end end if ( system.getInfo("environment") =="simulator" and system.getInfo("build") ~="2014.2189" ) then native.showAlert("Corona SDK Incompatible Version","Your Corona SDK version is different than the certified one with Kwik. Install build 2014.2189 or you may have issues in your project.",{"OK", "Download"}, versionCheck) end local TextCandy = require("lib_text_candy") composer.kwk_readMe = 0 display.setStatusBar( display.HiddenStatusBar ) composer.imgDir = "images/" composer.audioDir = "audio/" composer.videoDir = "video/" composer.spriteDir = "sprites/" composer.thumbDir = "thumbnails/" composer.lang = "" composer.kBidi = false composer.kAutoPlay = 0 composer.goPage = 1 -- Handles physical buttons on Android devices local function onKeyEvent( event )    local phase = event.phase    local keyName = event.keyName    if ( "back" == keyName and phase == "up" ) then       local function onComplete( event )          if "clicked" == event.action then             local i = event.index             if 1 == i then                native.cancelAlert( alert )             elseif 2 == i then                native.requestExit()             end          end       end       local alert = native.showAlert( "EXIT", "ARE YOU SURE?", { "NO", "YES" }, onComplete )       return true    end    return false end Runtime:addEventListener( "key", onKeyEvent ) -- Json code for external variable loading local jsonFile = function(filename )    local path = system.pathForFile(filename, system.DocumentsDirectory )    local contents    local file = io.open( path, "r" )    if file then       contents = file:read("*a")       io.close(file)    end    return contents end -- Variable saving function local path = system.pathForFile( "kwkVars.json", system.DocumentsDirectory ) local file = io.open( path, "r" ) if file then else    local file = io.open( path, "w+b" )    file:write("{{}}")    io.close(file) end -- Loads vars kwkVar = json.decode( jsonFile("kwkVars.json") ) -- Check for saved variables function kwkVarCheck(variable)    kwkVar = json.decode( jsonFile("kwkVars.json") )    local found = nil    if kwkVar ~= nil then       for i = 1, #kwkVar do          if (variable == kwkVar[i].name) then             found = kwkVar[i].value; break          end       end    end   return (found) end --Create a main grouplocal mainGroup = display.newGroup()-- Main functionlocal function main()   composer.gotoScene("page_"..composer.goPage)   return trueend--Clear timers and transitionscomposer.timerStash = {}composer.trans = {}composer.gt = {}composer.cancelAllTimers = function()    local k, v    for k,v in pairs(composer.timerStash) do        timer.cancel( v )        v = nil; k = nil    end    composer.timerStash = nil    composer.timerStash = {}end--composer.cancelAllTransitions = function()    local k, v    for k,v in pairs(composer.trans) do        transition.cancel( v )        v = nil; k = nil    end    composer.trans = nil    composer.trans = {}end--cancel all gtweenscomposer.cancelAllTweens = function()    local k, v    for k,v in pairs(composer.gt) do        v:pause();        v = nil; k = nil    end    composer.gt = nil    composer.gt = {}end--save all permanent variablesfunction zeroesKwikVars() --restart the file to save variable content	local path = system.pathForFile( "kwkVars.json", system.DocumentsDirectory )	local contents	local file = io.open( path, "w+b" )	if file then	   contents = file:write( "{{}}" )	   io.close( file )	-- close the file after using it	endendfunction saveKwikVars(toSave) --toSave is a table with contents    local varTab={}	--loop current kwkVar content (contains ALL variables saved)	local found = nil	local jsonString		--checks if current file is empty or not	local path = system.pathForFile( "kwkVars.json", system.DocumentsDirectory )	local contents	--check if file exists	local file = io.open( path, "r" )	if file then	    --reads to check if original content is empty == {{}}	    local test = file:read("*l") 	    if (test=="{{}}") then	        -- kwkVar.json is empty. Recreates the file with the new content	    	local file = io.open( path, "w+b" )	    	varTab[1] = {["name"] = toSave[1],["value"] = toSave[2]}			jsonString = json.encode( varTab )			contents = file:write( jsonString )			io.close( file )	    else	        --there are already variables saved in the kwkVars.json file	    	local file = io.open( path, "w" )	    	local ts = 0		    for i = 1,#kwkVar do		      if (toSave[1] == kwkVar[i].name) then				kwkVar[i].value = toSave[2]				varTab[i] = {["name"] = kwkVar[i].name,["value"] = kwkVar[i].value}				ts = 1			  else				varTab[i] = {["name"] = kwkVar[i].name,["value"] = kwkVar[i].value}			  end		    end		    if (ts == 0) then --variable not in the file yet		    	local x = #kwkVar		    	x = x + 1			    varTab[x] = {["name"] = toSave[1],["value"] = toSave[2]}			end		    jsonString = json.encode( varTab )	    	contents = file:write( jsonString )			io.close( file )	    end	    	    	else	    --re-creation scenario	    zeroesKwikVars()	end	kwkVar = json.decode( jsonFile( "kwkVars.json" ) )		end-- Beginmain()